/*
 * Copyright (c) 2016 IBM Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    group = 'com.cloudant'
    version = '2.4.0-SNAPSHOT'

    //if the version says "snapshot" anywhere assume it is not a release
    ext.isReleaseVersion = !version.toUpperCase(Locale.ENGLISH).contains("SNAPSHOT")

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        compile group: 'com.google.code.gson', name: 'gson', version: '2.2.4'
        compile group: 'commons-io', name: 'commons-io', version: '2.4'
        compile group: 'commons-codec', name: 'commons-codec', version: '1.6'
        //needed to compile, but optional for consumers of java-cloudant
        compile(group: 'com.squareup.okhttp', name: 'okhttp-urlconnection', version: '2.7.5') {
            ext.optional = true
        }
        //test dependencies
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'com.squareup.okhttp', name: 'mockwebserver', version: '2.7.5'
    }

//include variable debug info in the compiled classes
    compileJava.options.debugOptions.debugLevel = "source,lines,vars"
//fail on javac warnings
    compileJava.options.compilerArgs << "-Werror"
//suppress the bootstrap class path warning which will always apply if we build on a JVM newer
// than the -source setting and do not set the
// "-bootclasspath pathToJREMatchingSourceLevel/jre/lib/rt.jar"
    compileJava.options.compilerArgs << "-Xlint:-options"

    tasks.withType(Test) {
        // pick up properties named test.* from command line, gradle.properties first
        System.properties.each { prop ->
            if (prop.key.startsWith("test")) {
                systemProperty prop.key, prop.value
            }
        }
        testLogging {
            exceptionFormat = 'full'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        sourceSets.all {
            into(name + "/java", { from allJava })
            into(name + "/resources", { from resources })
        }
    }

    javadoc {
        options.setMemberLevel JavadocMemberLevel.PROTECTED
        //add a logging listener to check for javadoc warnings and fail the build if there are any
        boolean hasJavaDocWarnings = false;
        doFirst {
            getLogging().addStandardErrorListener(new StandardOutputListener() {
                void onOutput(CharSequence output) {
                    if (output =~ "warning:") {
                        hasJavaDocWarnings = true
                    }
                }
            })
        }
        doLast {
            if (hasJavaDocWarnings) {
                throw new GradleException("Build failed due to javadoc warnings.");
            }
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

//load signing and repository parameters from system properties
    ['signing.keyId', 'signing.password', 'signing.secretKeyRingFile', 'ossrhUsername', 'ossrhPassword']
            .each { propName ->
        //set a property with the given name if the system property is set
        //if the system property is not set then set the property to null if it isn't a signing one
        if (System.properties.(propName.toString()) != null || !propName.startsWith("signing")) {
            ext.(propName.toString()) = System.properties.(propName.toString())
        }
    }

    signing {
        //only apply signing when it is a release and is being published
        required {
            isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives")
        }
        //when signing, sign the archives
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {

                //when publishing sign the pom
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                //augment the pom with additional information
                pom.project {
                    packaging 'jar'
                    url 'https://cloudant.com'
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    scm {
                        connection 'scm:git:git://github.com/cloudant/java-cloudant.git'
                        developerConnection 'scm:git:git@github.com/cloudant/java-cloudant.git'
                        url 'https://java-cloudant@github.com/cloudant/java-cloudant.git'
                    }
                    properties {
                        'project.build.sourceEncoding' 'UTF-8'
                    }
                    developers {
                        developer {
                            name 'IBM Cloudant'
                            email 'support@cloudant.com'
                            url 'https://cloudant.com'
                            organization 'IBM'
                            organizationUrl 'http://www.ibm.com'
                        }
                    }
                }
            }
        }
    }

//add optional dependency attribute to pom (workaround for https://issues.gradle.org/browse/GRADLE-1749)
//get the gradle dependencies and make a map of artifactId to dependency object
    def compileDependencies = configurations.compile.dependencies.collectEntries { [it.name, it] }
//identify pom tasks
    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer
//when any pom tasks are being configured then analyze the gradle dependency for optional property
//and apply the optional property to the pom if it was set in the gradle
    [installer, deployer]*.pom*.whenConfigured { pom ->
        pom.dependencies.findAll {
            def compileDependency = compileDependencies.get(it.artifactId)
            return compileDependency?.hasProperty('optional') && compileDependency.optional
        }.each { dep -> dep.optional = true }
    }


    apply plugin: 'findbugs'
//findbugs
    findbugs {
        toolVersion = "3.0.1"
        //report only high severity bugs for now
        reportLevel = "high"
        //the code base is pretty small so use max effort
        effort = "max"
        //we don't want to run findbugs on the test code yet
        sourceSets = [sourceSets.main]
        //exclude a couple of known bugs until we get the chance to fix them
        if (file("findbugs_excludes.xml").exists()) {
            excludeFilter = file("findbugs_excludes.xml")
        }
    }

    tasks.withType(FindBugs) {
        //currently only one report type can be used toggle which with a property
        boolean generateXML = Boolean.getBoolean("findbugs.xml.report")
        reports {
            xml.enabled = generateXML
            html.enabled = !generateXML
        }
    }
}
